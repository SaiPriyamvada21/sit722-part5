# GitHub Actions workflow.
# Automatically deploys the microservices to Kubernetes on push to master branch.
name: Deploy Deakin Library App

on:
  # Deploys the microservice on push to the master branch of this code repository.
  push: 
    branches:
      - main

  # Allows deployment to be invoked manually through the GitHub Actions user interface.
  workflow_dispatch: 

jobs:

  deploy:
    runs-on: ubuntu-latest
    
    env:
      VERSION: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v3

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6 

      # Initialize Terraform
      - name: Terraform Init
        working-directory: ./scripts/terraform
        run: terraform init -upgrade

      # Apply Terraform configuration
      - name: Terraform Apply
        working-directory: ./scripts/terraform
        run: terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      # Login to Azure
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
           
      # Set up kubectl
      - name: Set up kubectl
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG_BASE64 }}
          kubectl-version: v1.24.2
       
       
      - name: Get Terraform Outputs
      id: outputs
      working-directory: ./scripts/terraform
      run: |
        echo "acr_login_url=$(terraform output -raw acr_login_url | grep -v "::debug")" >> $GITHUB_ENV
        echo "acr_username=$(terraform output -raw acr_username | grep -v "::debug")" >> $GITHUB_ENV
        echo "acr_password=$(terraform output -raw acr_password | grep -v "::debug")" >> $GITHUB_ENV
        echo "aks_kubeconfig=$(terraform output -raw aks_kubeconfig | grep -v "::debug")" >> $GITHUB_ENV

    # Step 8: Install GitHub CLI
    - name: Install GitHub CLI
      run: sudo apt-get install gh

    # Step 9: Authenticate GitHub CLI
    - name: Authenticate GitHub CLI
      run: |
        echo "${{ secrets.SECRETS_MODIFY_TOKEN }}" | gh auth login --with-token

    # Step 10: Create GitHub Secrets from Outputs
    - name: Create GitHub Secrets
      run: |
        echo "Creating or updating secrets in GitHub repository"

        gh secret set CONTAINER_REGISTRY -b "${{ env.acr_login_url }}"
        gh secret set REGISTRY_UN -b "${{ env.acr_username }}"
        gh secret set REGISTRY_PW -b "${{ env.acr_password }}"
        gh secret set KUBE_CONFIG -b "${{ env.aks_kubeconfig }}"
     

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Builds the Docker image.
      - name: Build
        env:
          CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
          VERSION: ${{ github.sha }}
        run: ./scripts/build-image.sh

      # Publishes the Docker image to the container registry.
      - name: Publish
        env:
          CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
          VERSION: ${{ github.sha }}
        run: ./scripts/push-image.sh
      
      # Expands the configuration template and deploys the microservice.
      - name: Deploy
        env:
          CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
          VERSION: ${{ github.sha }}
        run: ./scripts/deploy.sh

      - name: Get Kubernetes Services
        run: kubectl get services

      - name: Get Kubernetes Pods
        run: kubectl get pods
